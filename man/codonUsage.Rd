% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codonComparisons.R
\name{codonUsage}
\alias{codonUsage}
\title{Codon usage similarity metrics.}
\arguments{
\item{cFobj}{An object of class \code{codonFreq}.}

\item{exclude}{A character vector of codons to be excluded from comparisons.}

\item{minlen}{Integer, the minimum length of sequence (in nucleotides) in the
\code{codonFreq} object to be used for the analysis. Default is 3.}
}
\value{
A matrix or a numeric vector with CU measure values.
   For \code{MILC}, \code{B}, \code{ENCprime}, the matrix has a column
   with values for every specified subset
   (\code{subsets}, \code{self}, \code{ribosomal}).
   A numeric vector for \code{ENC} and \code{SCUO}.
}
\description{
Calculate measures of codon usage similarity between sequences in a
   \code{codonFreq} object and those in a reference database.
Mean codon frequency usage difference (\code{MCUFD}) is calculated as
   described in \href{https://goo.gl/7sGZeE}{Stedman et al. (2013)}.
}
\examples{
# load example DNA sequences
exampledir <- system.file("extdata", package = "coRdon")
cT <- codonTable(readSet(exampledir))

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# In the examples below, MILC values are calculated for all sequences;
# B and ENCprime can be caluclated in the same way.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# calculate MILC distance to the average CU of the example DNA sequences
milc <- MILC(cT)
head(milc)

# also calculate MILC distance to the average CU
# of ribosomal genes among the example DNA sequences
milc <- MILC(cT, ribosomal = TRUE)
head(milc)

# calculate MILC distance to the average CU
# of the first 20 example DNA sequences
# (i.e. the first half of the example DNA set)
milc <- MILC(cT, self = FALSE,
             subsets = list(half = c(rep(TRUE, 20), rep(FALSE, 20))))

# alternatively, you can specify codonTable as a subset
halfcT <- codonTable(codonCounts(cT)[1:20,])
milc2 <- MILC(cT, self = FALSE, subsets = list(half = halfcT))
all.equal(milc, milc2) # TRUE

# filtering
MILC(cT, filtering = "hard", len.threshold = 80) # MILC for 9 sequences
sum(getlen(cT) > 80) # 9 sequences are longer than 80 codons
milc1 <- MILC(cT, filtering = "none") # no filtering
milc2 <- MILC(cT, filtering = "soft") # warning
all.equal(milc1, milc2) # TRUE

# options for genetic code
milc <- MILC(cT, stop.rm = TRUE) # don't use stop codons in calculation
milc <- MILC(cT, alt.init = FALSE) # don't use alternative start codons
milc <- MILC(cT, id_or_name2 = "2") # use different genetic code, for help
                                    # see `?Biostrings::GENETIC_CODE`

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# In the examples below, ENC values are calculated for all sequences;
# SCUO values can be caluclated in the same way.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# calculate ENC
enc <- ENC(cT)
head(enc)

# filtering
ENC(cT, filtering = "hard", len.threshold = 80) # ENC for 9 sequences
sum(getlen(cT) > 80) # 9 sequences are longer than 80 codons
enc1 <- ENC(cT, filtering = "none") # no filtering
enc2 <- ENC(cT, filtering = "soft") # warning
all.equal(enc1, enc2) # TRUE

# options for genetic code
enc <- ENC(cT, stop.rm = TRUE) # don't use stop codons in calculation
enc <- ENC(cT, alt.init = FALSE) # don't use alternative start codons
enc <- ENC(cT, id_or_name2 = "2") # use different genetic code, for help
                                  # see `?Biostrings::GENETIC_CODE`

}
